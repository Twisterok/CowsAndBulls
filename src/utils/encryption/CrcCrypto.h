// 14.03.2013 CrcCrypto.h                    

// *********************************
// КОНТРОЛЬНЫЕ СУММЫ и КРИПТОФУНКЦИИ
// *********************************
// Л.В.Быстров
// (С) 2009-2013 УДОБНЫЙ МАРШРУТ                         
// *********************************

// ============================================================================
// КОНТРОЛЬНЫЕ СУММЫ - вычисление кода Luch, BCC8, CRC8, CRC16
//
// КРИПТОФУНКЦИИ - вычисление D.E.S. и Triple D.E.S. (ISO/IEC 18033-3), а также 
//                 варианта Triple D.E.S. с опцией Cipher Block Chaining (CBC),
//                 вычисление  MAC - Message Authentication Code  по алгоритмам
//                 MAC ISO/IEC 9797-1:1999 Algorithms 1, 3 и 6 Padding method 2
// ============================================================================



                                 // ==================================================================
                                 // Флаг управления алгоритмом DES
                                 // ==================================================================
// #define DES_PC                //              Алгоритм DES для персонального компьютера (медленный)
// #else, т.е. DES_PC по умолчанию не определен: Алгоритм DES для контроллера (быстрый, рекомендуется)
                                 // ==================================================================





// *********************************
// К О Н Т Р О Л Ь Н Ы Е   С У М М Ы
// *********************************

                                 // =====================================================================
int Luhn(                        // РАСЧЕТ КОДА Luhn ЦИФРОВОЙ ПОСЛЕДОВАТЕЛЬНОСТИ (ISO/IEC 7812) 
                                 // =====================================================================
                                 // Возвращает 0 и код Luhn (ISO/IEC 7812) цифровой последовательности, 
                                 // как символ цифры (например, '8') в последнем элементе массива ciphers
                                 // или 1, если массив содержит хотя бы один нецифровой символ, либо
                                 // длина цифровой последовательности лежит вне пределов, установленных
                                 // стандартом ISO/IEC 7812
                                 // =====================================================================
   unsigned short len,           // Длина цифровой последовательности (включая код Luhn),
                                 //    согласно ISO/IEC 7812 len варьируется от 13 до 19 
   unsigned char *ciphers);      // Цифровая последовательность с цифрами в виде символов, 
                                 //    например '9', '6', '4', '3', и т.д., для которой надо
                                 //    рассчитать код Luhn; последний элемент массива на входе
                                 //    должен быть зарезервирован под рассчитываемый код Luhn
                                 // =====================================================================


                                 // =========================================================
unsigned char BCC8(              // ВЫЧИСЛЕНИЕ КОНТРОЛЬНОЙ СУММЫ BCC8 МАССИВА БАЙТОВ
                                 // BCC8 = bufer[0] XOR buffer[1] ... XOR buffer[length]
                                 // =========================================================
   unsigned short  length,       // Длина массива (до 65535 байтов)
   unsigned char  *buffer);      // Массив байтов, для которого вычисляется контрольная сумма
                                 // =========================================================
                              
                              
                                 // ==========================================================
unsigned char CRC8(              // ТАБЛИЧНОЕ ВЫЧИСЛЕНИЕ КОНТРОЛЬНОЙ СУММЫ CRC8 МАССИВА БАЙТОВ
                                 // ==========================================================
   unsigned char  length,        // Длина массива (до 256 байтов!)
   unsigned char *buffer);       // Массив байтов, для которого вычисляется контрольная сумма
                                 // ==========================================================


                                 // ==========================================================
                                 // ВЫЧИСЛЕНИЕ КОНТРОЛЬНОЙ СУММЫ CRC16 (x^16 + x^12 + x^5 + 1) 
void CRC16(                      // ==========================================================
   short               len,      // Длина массива
   const unsigned char buffer[], // Массив байтов, для которого вычисляется контрольная сумма
   unsigned char      *crc16);   // Контрольная сумма массива
                                 // ==========================================================


// *************************
// К Р И П Т О Ф У Н К Ц И И
// *************************

#define ENCRYPT              0   // Шифровать
#define DECRYPT              1   // Расшифровывать
                                 
#define DES3_2KEYS           0   // Длина ключа для Triple D.E.S. 128 bits (Двойной ключ, 16 байтов)
#define DES3_3KEYS           1   // Длина ключа для Triple D.E.S. 192 bits (Тройной ключ, 24 байта)

                                 
                               // ======================================================
void DES1(                       // БЛОЧНОЕ (по 8 байтов) ШИФРОВАНИЕ ПО АЛГОРИТМУ D.E.S.
                                 //                                     ISO/IEC 18033-3
                                 // ======================================================
   unsigned char  enc,           // Шифровать (ENCRYPT) или расшифровать (DECRYPT)
   unsigned char *key,           // Секретный ключ (8 байтов)
   unsigned char *tinp,          // Исходное массив (8 байтов)
   unsigned char *tout);         // Результат (зашифрованный или расшифрованный, 8 байтов)
                                 // ======================================================
                                 
                                 
                                 // ===========================================================
void DES3(                       // БЛОЧНОЕ (по 8 байтов) ШИФРОВАНИЕ ПО АЛГОРИТМУ Triple D.E.S.
                                 //                                            ISO/IEC 18033-3
                                 // ===========================================================
   unsigned char  CryptoMode,    // ENCRYPT - зашифровать, DECRYPT - расшифровать
   unsigned char  KeyMode,       // DES3_2KEYS - длина ключа 16 байтов, DES3_3KEYS - 24 байта
   unsigned char *Key,           // Ключ (длина определена константой KeyMode)
   unsigned char *InMessage,     // Входное сообщение (8 байтов)
   unsigned char *OutMessage);   // Выходное сообщение (8 байтов)
                                 // ===========================================================

                                 
                                 // ====================================================================
unsigned char CBC_3DES(          // ШИФРОВАНИЕ ПО АЛГОРИТМУ Triple D.E.S. (ISO/IEC 18033-3) с опцией CBC
                                 // ====================================================================
   unsigned char  CryptoMode,    // ENCRYPT - зашифровать, DECRYPT - расшифровать
   unsigned char  KeyMode,       // DES3_2KEYS - длина ключа 16 байтов, DES3_3KEYS - 24 байта
   unsigned char *Key,           // Ключ (длина определена константой KeyMode)
   unsigned short DataLen,       // Длина входного/выходного сообщения (должна быть кратна восьми!)
   unsigned char *Data);         // Входное/выходное сообщение (DataLen байтов)
                                 // ====================================================================
                                 // ВНИМАНИЕ: В функции нет никакого паддинга! 
                                 //           Длина входного сообщения должна быть строго кратна восьми!
                                 //           В противном случае функция возвращает 1 (иначе 0)
                                 // ====================================================================
                                 //    КОММЕНТАРИИ:
                                 //    Режим сцепления блоков шифрованного текста (англ. Cipher Block Chaining, CBC) - один из вариантов 
                                 //    использования симметричного блочного шифра с использованием механизма обратной связи
                                 //    Каждый блок открытого текста (кроме первого) побитно складывается по модулю 2 (операция XOR) 
                                 //    с предыдущим результатом шифрования 
                                 //    В качестве криптографического алгоритма (процедуры шифрования/дешифрования) используется Triple DES
                                 //    Ссылка:
                                 //    http://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%B6%D0%B8%D0%BC_%D1%81%D1%86%D0%B5%D0%BF%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F_%D0%B1%D0%BB%D0%BE%D0%BA%D0%BE%D0%B2_%D1%88%D0%B8%D1%84%D1%80%D0%BE%D1%82%D0%B5%D0%BA%D1%81%D1%82%D0%B0
                               
                                 
                                   
                                 // =====================================================
void MAC979712(                  // РАСЧЕТ MESSAGE AUTHENTICATION CODE (MAC) ПО СТАНДАРТУ
                                 // ISO/IEC 9797-1:1999 Algorithm 1 Padding method 2
                                 // =====================================================
   unsigned char  *Message,      // Сообщение, для которого расчитывается MAC
   unsigned short  Length,       // Длина этого сообщения (до 65535)
   unsigned char  *Key,          // Ключ длиной 8 байтов
   unsigned char   Truncating,   // Число байтов усечения справа MAC
   unsigned char  *MAC);         // 8 байтов MAC (усеченные байты равны 0х00)
                                 // =====================================================
                                 
                                 
                                 // =====================================================
void MAC979732(                  // РАСЧЕТ MESSAGE AUTHENTICATION CODE (MAC) ПО СТАНДАРТУ
                                 // ISO/IEC 9797-1:1999 Algorithm 3 Padding method 2
                                 // =====================================================
   unsigned char  *Message,      // Сообщение, для которого расчитывается MAC
   unsigned short  Length,       // Длина этого сообщения (до 65535)
   unsigned char  *Key,          // Ключ длиной 16 байтов
   unsigned char   Truncating,   // Число байтов усечения справа MAC
   unsigned char  *MAC);         // 8 байтов MAC (усеченные байты равны 0х00)
                                 // =====================================================
                                 
                                 
                                 // =====================================================
void MAC979762(                  // РАСЧЕТ MESSAGE AUTHENTICATION CODE (MAC) ПО СТАНДАРТУ
                                 // ISO/IEC 9797-1:1999 Algorithm 6 Padding method 2
                                 // =====================================================
   unsigned char  *Message,      // Сообщение, для которого расчитывается MAC
   unsigned short  Length,       // Длина этого сообщения (до 65535)
   unsigned char  *Key,          // Ключ длиной 16 байтов
   unsigned char   Truncating,   // Число байтов усечения справа MAC
   unsigned char  *MAC);         // 8 байтов MAC (усеченные байты равны 0х00)
                                 // =====================================================



